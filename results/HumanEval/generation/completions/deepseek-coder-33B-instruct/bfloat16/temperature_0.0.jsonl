{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    return [s.replace(' ', '') for s in paren_string.split(')(') if s]\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    x_mean = sum(numbers) / len(numbers)\n    return sum(abs(x - x_mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    return [max_depth(paren_string) for paren_string in paren_string.split()]\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_numbers: List[int] = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i + 1]))\n    return max_numbers\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return ''\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    raise RuntimeError('We should never get here')\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: numbers_dict[x])\n    return ' '.join(numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if type(value) == int]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    return [x for x in numbers if numbers.count(x) == 1]\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    else:\n        k = 2\n        while k < n:\n            if n % k == 0:\n                return False\n            k += 1\n        return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    # find largest non zero coefficient\n    n = len(xs)\n    for i in range(n - 1, -1, -1):\n        if xs[i] != 0:\n            break\n    # divide all coefficients by largest non zero coefficient\n    xs = [x / xs[i] for x in xs]\n    # find zero point\n    x = 0.5\n    while True:\n        y = poly(xs, x)\n        if abs(y) < 1e-6:\n            return x\n        x -= y / poly(range(1, n), x)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_third.sort()\n    l_new = [l_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n    return l_new\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices.pop(0)\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\n    i = 1\n    count = 0\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n < 0:\n        raise ValueError(\"Negative arguments are not supported\")\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    pass\n"}
{"task_id": "HumanEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(i, v) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in sorted(c.items(), reverse=True):\n        if k <= v:\n            return k\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    return dp[0][n - 1]\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    # v3\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n\n    # v2\n    # return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2\n\n    # v1\n    # return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in primes:\n        if a % i == 0:\n            a /= i\n            count += 1\n    return count == 3\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x < 1:\n        return False\n    else:\n        while x % n == 0:\n            x /= n\n        return x == 1\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    # your code here\n    return round(a**(1./3))**3 == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in primes:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n    else:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return 2 * (10 ** (n - 1)) - 10 ** (n - 2)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Your code here\n    # convert N to binary\n    binary = bin(N)[2:]\n    # convert binary to integer\n    binary = int(binary)\n    # sum the digits\n    sum_digits = sum(int(digit) for digit in str(binary))\n    # convert sum_digits to binary\n    sum_digits = bin(sum_digits)[2:]\n    return sum_digits\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    return ''.join(chr((ord(c) - 97 + 2*2) % 26 + 97) for c in s)\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and (S[i-1] == ' ' or S[i-1] == '.' or S[i-1] == '!' or S[i-1] == '?'):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 2) % 5]\n                if char.isupper():\n                    new_char = new_char.upper()\n                encoded_message += new_char\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(i) for i in str(n))\n\n    primes = [i for i in lst if is_prime(i)]\n    return sum_of_digits(max(primes)) if primes else 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    return all(k.islower() for k in dict if isinstance(k, str)) or all(k.isupper() for k in dict if isinstance(k, str))\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, possiblePrime):\n            if possiblePrime % num == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    return [n + i for i in range(n)]\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if all(int(j) % 2 != 0 for j in str(i))])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [num_to_word[i] for i in sorted([i for i in arr if 1 <= i <= 9])[::-1]]\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    return [1 if i % 2 != 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    ### Canonical solution below ###\n    pass\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    return sum(sum(int(d) for d in str(abs(n))) > 0 for n in arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    else:\n        count = 0\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                count += 1\n        if arr[-1] > arr[0]:\n            count += 1\n        return count <= 1\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    else:\n        test = test.split()\n        count = {}\n        for i in test:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        max_val = max(count.values())\n        return {k: v for k, v in count.items() if v == max_val}\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = ''.join(i for i in s if i not in c)\n    return (s, s == s[::-1])\n\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number of odd elements {len([x for x in i if int(x) % 2 != 0])}n the str{len(i)}ng {len(i)} of the {len(i)}nput.\" for i in lst]\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum = min(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Write your code here\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n    # print(grid, file=sys.stderr, flush=True)\n    # print(capacity, file=sys.stderr, flush=True)\n\n    # 1. Count the number of water units in each row\n    # 2. Sort the list of water units\n    # 3. Iterate over the sorted list, subtracting the capacity from each element\n    # 4. Count the number of times the capacity is subtracted\n\n    # 1. Count the number of water units in each row\n    water_units = [sum(row) for row in grid]\n\n    # 2. Sort the list of water units\n    water_units.sort()\n\n    # 3. Iterate over the sorted list, subtracting the capacity from each element\n    # 4. Count the number of times the capacity is subtracted\n    count = 0\n    for water in water_units:\n        count += math.ceil(water / capacity)\n\n    return count\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    assert 0 <= k <= len(arr)\n\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    assert 1 <= len(arr) <= 100\n    assert 1 <= k <= len(arr)\n\n    return sum(x for x in arr[:k] if x < 100)\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    if re.match(r'\\b\\d{2}-\\d{2}-\\d{4}\\b', date):\n        month, day, year = map(int, date.split('-'))\n        if month in (1, 3, 5, 7, 8, 10, 12) and 1 <= day <= 31:\n            return True\n        elif month in (4, 6, 9, 11) and 1 <= day <= 30:\n            return True\n        elif month == 2 and 1 <= day <= 29:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 0)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start\n    if intersection_length < 1:\n        return \"NO\"\n    if intersection_length == 1:\n        return \"NO\"\n    for i in range(2, intersection_length):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    sign = 1\n    for i in arr:\n        if i < 0:\n            sign *= -1\n        elif i == 0:\n            return 0\n    return sign * sum(abs(i) for i in arr)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        tri = [3, 1, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri.append(1 + i / 2)\n            else:\n                tri.append(tri[i - 2] + tri[i - 1] + tri[i - 3])\n        return tri\n"}
{"task_id": "HumanEval/131", "completion": "\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    product = 1\n    for d in odd_digits:\n        product *= d\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n\n    # v1\n    # return '[]' in string\n\n    # v2\n    return any(i == j for i, j in zip(string, string[1:]))\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(i)**2 for i in lst)\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == '':\n        return False\n    elif txt[-1].isalpha() and txt[-2] == ' ':\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 8\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if len(re.findall('\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            if num_str[0] in '13579' and num_str[-1] in '13579':\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted([i for i in lst if len(i) % 2 == 0])\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum(i**2 for i in lst if i > 0 and i % 2 != 0)\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n\n"}
{"task_id": "HumanEval/153", "completion": "\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    return f'{class_name}.{max(extensions, key=strength)}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[-1] + b[:-1]\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
