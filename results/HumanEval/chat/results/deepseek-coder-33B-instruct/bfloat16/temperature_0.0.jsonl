{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n\n    return result", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depths = []\n    max_depth = 0\n    cur_depth = 0\n    for char in paren_string:\n        if char == '(':\n            cur_depth += 1\n            if cur_depth > max_depth:\n                max_depth = cur_depth\n        elif char == ')':\n            cur_depth -= 1\n        elif char == ' ':\n            max_depths.append(max_depth)\n            max_depth = 0\n            cur_depth = 0\n    max_depths.append(max_depth)\n    return max_depths", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(mul, numbers))\n", "passed": false, "result": "name 'reduce' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/9", "completion": "    return [max(numbers[:i+1]) for i in range(len(numbers))]", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/18", "completion": "    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/26", "completion": "    count_dict = {}\n    result = []\n    for num in numbers:\n        if num not in count_dict:\n            count_dict[num] = 1\n            result.append(num)\n        else:\n            count_dict[num] += 1\n    return result\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/32", "completion": "    def poly_derivative(xs: list):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    def poly_value(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    x = 0.0\n    while abs(poly_value(xs, x)) > 1e-6:\n        x = x - poly_value(xs, x) / poly_value(poly_derivative(xs), x)\n    return round(x, 2)", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/33", "completion": "    # Create a list of elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the list\n    divisible_by_three.sort()\n    # Create a new list with elements at indices not divisible by 3\n    new_list = [l[i] if i % 3 != 0 else divisible_by_three.pop(0) for i in range(len(l))]\n    return new_list\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo the cycle in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n\n    return fib_num", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (l[i] + l[j] + l[k] == 0):\n                    return True\n    return False", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/41", "completion": "    return 0", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/42", "completion": "    return [i+1 for i in l]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    nums = []\n    while x:\n        x, rem = divmod(x, base)\n        nums.append(str(rem))\n    return ''.join(reversed(nums))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/46", "completion": "    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n    return fib[n]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/58", "completion": "\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/63", "completion": "    if n < 0:\n        return \"Input should be a positive integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and s.index(char) == len(s) - 1:\n            count += 1\n    return count\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/67", "completion": "    # split the string into a list of words\n    words = s.split()\n    # get the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[2])\n    # calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes", "passed": false, "result": "invalid literal for int() with base 10: 'and'", "exception": "ValueError"}
{"task_id": "HumanEval/68", "completion": "    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n", "passed": false, "result": "Error", "exception": "AssertionError"}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    counter = Counter(lst)\n    for num in sorted(counter.keys(), reverse=True):\n        if num == counter[num]:\n            return num\n    return -1\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif arr[i - 1] == arr[n - j]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n - dp[n][n]\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/75", "completion": "    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "passed": false, "result": "name 'is_prime' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        a = -a\n    root = round(a ** (1. / 3))\n    return root ** 3 == a\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/78", "completion": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/83", "completion": "    return (10**(n-1) + 10**n - 1) * 10**(n-1) // 2 - 9 * 10**(n-2)", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/84", "completion": "    # Convert the integer to binary\n    binary = bin(N)[2:]\n    \n    # Initialize the sum\n    total = 0\n    \n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Add the digit to the total\n        total += int(digit)\n    \n    # Convert the total back to binary and return it\n    return bin(total)[2:]\n", "passed": false, "result": "Error", "exception": "AssertionError"}
{"task_id": "HumanEval/85", "completion": "    return sum(val for idx, val in enumerate(lst) if idx % 2 != 0 and val % 2 == 0)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        smallest = lst[0]\n        for i in lst:\n            if i > smallest:\n                return i\n        return None\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/91", "completion": "    sentences = [s.strip() for s in re.split(r'[.!?]', S) if s.strip()]\n    return sum(1 for s in sentences if s.startswith(\"I\"))\n\nimport re\n", "passed": false, "result": "Test 2", "exception": "AssertionError"}
{"task_id": "HumanEval/92", "completion": "    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = (vowels.index(char.lower()) + 2) % 5\n                if char.isupper():\n                    encoded_message += vowels[index].upper()\n                else:\n                    encoded_message += vowels[index]\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n", "passed": false, "result": "This prints if this assert fails 1 (good for debugging!)", "exception": "AssertionError"}
{"task_id": "HumanEval/94", "completion": "    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "passed": false, "result": "name 'is_prime' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    lower_case = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return lower_case or upper_case\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/96", "completion": "    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return [x for x in range(2, n) if sieve[x]]", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/97", "completion": "    return abs(a) % 10 * abs(b) % 10\n", "passed": false, "result": "First test error: 6", "exception": "AssertionError"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + 2*i)\n        else:\n            pile.append(n + 2*i)\n    return pile\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \"\").split()\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted(n for n in x if not has_even_digit(n))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/105", "completion": "    # Define a dictionary to map numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", \n                   6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter the array to only include numbers between 1 and 9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each number with its name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/106", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        return True\n    for i in range(len(arr)):\n        arr = arr[-1:] + arr[:-1]\n        if arr == sorted_arr:\n            return True\n    return False", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/110", "completion": "    # Check if all elements in lst1 are even\n    for num in lst1:\n        if num % 2 != 0:\n            # If there is an odd number in lst1, check if there is an even number in lst2\n            if num % 2 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    return \"YES\"\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n\n    letters = test.split()\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values())\n    return {k: v for k, v in letter_counts.items() if v == max_count}\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return (result, result == result[::-1])\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum = min(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/115", "completion": "    count = 0\n    for row in grid:\n        if sum(row) <= capacity:\n            count += 1\n        else:\n            count += math.ceil(sum(row) / capacity)\n    return count", "passed": false, "result": "Error", "exception": "AssertionError"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/119", "completion": "    def is_balanced(s):\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return sorted(arr[:k])\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/122", "completion": "    return sum(x for x in arr[:k] if x < 100)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/123", "completion": "    def collatz(n):\n        while n != 1:\n            yield n\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        yield 1\n\n    return sorted(x for x in collatz(n) if x % 2 != 0)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n\n    # Check if the date is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if day < 1 or day > 31:\n        return False\n\n    # Check if the day is valid for February\n    if month == 2 and day > 29:\n        return False\n\n    # Check if the day is valid for April, June, September, and November\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    return True", "passed": false, "result": "name 're' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst) and len(lst) == len(set(lst))\n", "passed": false, "result": "This prints if this assert fails 7 (good for debugging!)", "exception": "AssertionError"}
{"task_id": "HumanEval/127", "completion": "    # Find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # If the intersection is empty, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, intersection_length):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num < 0:\n            product *= -1\n        elif num == 0:\n            return 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    min_path = None\n\n    def dfs(i, j, path):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                visited[x][y] = True\n                dfs(x, y, path + [grid[x][y]])\n                visited[x][y] = False\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n\n    return min_path", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        trib = [3, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i / 2)\n            else:\n                trib.append(trib[i-3] + trib[i-2] + trib[i-1])\n        return trib", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0\n", "passed": false, "result": "This prints if this assert fails 1 (good for debugging!)", "exception": "AssertionError"}
{"task_id": "HumanEval/133", "completion": "    return sum(math.ceil(i)**2 for i in lst)\n", "passed": false, "result": "name 'math' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt[-2] == ' ':\n        return True\n    return False\n", "passed": false, "result": "string index out of range", "exception": "IndexError"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/136", "completion": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    else:\n        return n/2 % 2 == 0\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/139", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/140", "completion": "    text = list(text)\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i + 1 < len(text) and text[i + 1] == ' ':\n                if i + 2 < len(text) and text[i + 2] == ' ':\n                    text[i] = '-'\n                    del text[i + 1]\n                else:\n                    text[i] = '_'\n                    del text[i + 1]\n            else:\n                text[i] = '_'\n        i += 1\n    return ''.join(text)\n", "passed": false, "result": "This prints if this assert fails 3 (good for debugging!)", "exception": "AssertionError"}
{"task_id": "HumanEval/141", "completion": "    import re\n\n    # Check if there are more than three digits in the file's name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file's name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file's name into two parts: before and after the dot\n    name, extension = file_name.split('.')\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the valid extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/142", "completion": "    return sum(x**2 if i%3==0 else x**3 if i%4==0 else x for i, x in enumerate(lst))\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    num = x_num * n_num\n    denom = x_denom * n_denom\n\n    return gcd(num, denom) == 1", "passed": false, "result": "test1", "exception": "AssertionError"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/146", "completion": "    def is_odd(n):\n        return n in [1, 3, 5, 7, 9]\n\n    def is_special(n):\n        return n > 10 and is_odd(int(str(n)[0])) and is_odd(int(str(n)[-1]))\n\n    return len([n for n in nums if is_special(n)])\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return tuple(planets[planet1_index+1:planet2_index])\n        else:\n            return tuple(planets[planet2_index+1:planet1_index])\n    else:\n        return ()\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/149", "completion": "    # Filter out the strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n\n    return lst\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    else:\n        return sum(i**2 for i in lst if i > 0 and i % 2 == 1)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - s) for g, s in zip(game, guess)]\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/153", "completion": "    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest_ext = max(extensions, key=strength)\n    return f'{class_name}.{strongest_ext}'\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n", "passed": false, "result": "", "exception": "AssertionError"}
{"task_id": "HumanEval/156", "completion": "    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/161", "completion": "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)\n", "passed": true, "result": "passed", "exception": null}
{"task_id": "HumanEval/162", "completion": "    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", "passed": false, "result": "name 'hashlib' is not defined", "exception": "NameError"}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n", "passed": false, "result": "Test 1", "exception": "AssertionError"}
